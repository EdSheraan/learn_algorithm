public int ladderLength(String beginWord, String endWord, List<String> wordList) {
    //转换为hashset 加快速度
    HashSet<String> wordSet = new HashSet<>(wordList); 
    if (wordSet.size() == 0 || !wordSet.contains(endWord)) {  
        return 0;
    }
    Queue<String> queue = new LinkedList<>(); //bfs 队列
    queue.offer(beginWord);
     //记录单词对应路径长度
    Map<String, Integer> map = new HashMap<>();
    map.put(beginWord, 1);

    while (!queue.isEmpty()) {
        //取出队头单词
        String word = queue.poll(); 
        //获取到该单词的路径长度
        int path  = map.get(word); 
        //遍历单词的每个字符
        for (int i = 0; i < word.length(); i++) { 
            //将单词转换为char array，方便替换
            char[] chars = word.toCharArray(); 
            //从'a' 到 'z' 遍历替换
            for (char k = 'a'; k <= 'z'; k++) { 
                 //替换第i个字符
                chars[i] = k;
                //得到新的字符串
                String newWord = String.valueOf(chars); 
                //如果新的字符串值与endWord一致，返回当前长度+1
                if (newWord.equals(endWord)) {  
                    return path + 1;
                }
                //如果新单词在set中，但是没有访问过
                if (wordSet.contains(newWord) && !map.containsKey(newWord)) { 
                    //记录单词对应的路径长度
                    map.put(newWord, path + 1); 
                   //加入队尾
                    queue.offer(newWord);
                }
            }
        }
    }
    return 0; 
}
